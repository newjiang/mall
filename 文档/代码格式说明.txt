java代码：

关于类：
	驼峰名字法，首字母大写，每个单词首字母大写，其余小写，如UserController.java

关于接口：
	驼峰名字法，首字母是大写的'I'开头，再接名字，名字和类的要求一致，如：IUserService.java
	Mapper接口除外，Mapper接口的命名统一是名字+Mapper后缀，如：UserMapper.java
	实现类直接用接口的I后面的部分作为名字，如多个可以另外命名，最好不要用Impl作为后缀。

	控制层和业务层必须编写一个接口，这个很重要。持久如果不嫌麻烦可以通过类实现。

关于属性：
	驼峰名字法，首字母小写，后面的单词首字母大写，如：String helloWorld;

关于方法：
	驼峰名字法，首字母小写，后面的单词首字母大写，如：sayHelloWorld()

	关于查询方法的开头：find,query或者get作为前缀。方法名字不必带实体类的名字，如findUserById应该写成findById。

	关于添加的方法：add,insert作为前缀。

	关于删除的方法：delele,remove作为前缀。

	关于更改的方法：update作为前缀。

关于注释：
	属性上用 // 注释，如:
		// 用户名
		private String username

	接口用多行注释，如：

	/**
	*根据用户id查询
	*@param id 用户id
	*@return User
	*/
	User findById(String id);

	若接口上写了注释，实现类不必再写注释，如果类的方法没有注释，则添加注释，要求与接口相同。


关于SQL名字
	统一用下划线命名字段，别名。

关于实体类：
    model包下的实体类：既是dto，也是entity。
    字段命名要与数据库字段命名相对应。如：数据库字段user_name,model类就是userName。
    这个影响比较多，如果想要通用的insert操作或者是update操作的话。

    其次，vo用于前端展示。

    特别注意一点

关于目录
...
    api                 //接口
        controller      //控制层接口
        model           //实体类
        service         //业务层接口
        vo              //值对象类
    controller      //控制层的实现类
    dao             //持久层接口
    service         //业务层接口
    Application.java    //应用启动类
